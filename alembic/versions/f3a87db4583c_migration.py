"""migration

Revision ID: f3a87db4583c
Revises: 
Create Date: 2025-04-03 12:50:15.574286

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2

# revision identifiers, used by Alembic.
revision: str = 'f3a87db4583c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('abstract', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('category_id', name=op.f('pk_categories'))
    )
    op.create_table('licenses',
    sa.Column('license_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('license_id', name=op.f('pk_licenses'))
    )
    op.create_table('providers',
    sa.Column('provider_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('provider_url', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('provider_id', name=op.f('pk_providers'))
    )
    op.create_table('resources',
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('abstract', sa.String(), nullable=False),
    sa.Column('html_content', sa.String(), nullable=True),
    sa.Column('resource_url', sa.String(), nullable=True),
    sa.Column('documentation_url', sa.String(), nullable=True),
    sa.Column('git_url', sa.String(), nullable=True),
    sa.Column('maintenance_and_update_frequency', sa.String(), nullable=True),
    sa.Column('release_date', sa.Date(), nullable=True),
    sa.Column('contact', sa.String(), nullable=True),
    sa.Column('keywords', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('version', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('license_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['license_id'], ['licenses.license_id'], name=op.f('fk_resources_license_id_licenses')),
    sa.PrimaryKeyConstraint('resource_id', name=op.f('pk_resources'))
    )
    op.create_table('codeexamples',
    sa.Column('examples_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('resource_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_codeexamples_resource_id_resources')),
    sa.PrimaryKeyConstraint('examples_id', name=op.f('pk_codeexamples'))
    )
    op.create_table('examples',
    sa.Column('example_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('example_url', sa.String(), nullable=True),
    sa.Column('favicon_url', sa.String(), nullable=True),
    sa.Column('resource_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_examples_resource_id_resources')),
    sa.PrimaryKeyConstraint('example_id', name=op.f('pk_examples'))
    )
    op.create_table('hasresources',
    sa.Column('has_resources_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.category_id'], name=op.f('fk_hasresources_category_id_categories')),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_hasresources_resource_id_resources')),
    sa.PrimaryKeyConstraint('has_resources_id', name=op.f('pk_hasresources'))
    )
    op.create_table('linkedto',
    sa.Column('usedby', sa.UUID(), nullable=False),
    sa.Column('basedon', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['basedon'], ['resources.resource_id'], name=op.f('fk_linkedto_basedon_resources')),
    sa.ForeignKeyConstraint(['usedby'], ['resources.resource_id'], name=op.f('fk_linkedto_usedby_resources')),
    sa.PrimaryKeyConstraint('usedby', 'basedon', name=op.f('pk_linkedto'))
    )
    op.create_table('provides',
    sa.Column('provider_id', sa.UUID(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider_id'], name=op.f('fk_provides_provider_id_providers')),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_provides_resource_id_resources')),
    sa.PrimaryKeyConstraint('provider_id', 'resource_id', name=op.f('pk_provides'))
    )
    op.create_table('spatialextents',
    sa.Column('spatial_extent_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('region', sa.String(), nullable=True),
    sa.Column('details', sa.String(), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('spatial_resolution', sa.String(), nullable=True),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_spatialextents_resource_id_resources')),
    sa.PrimaryKeyConstraint('spatial_extent_id', name=op.f('pk_spatialextents'))
    )
    op.create_table('temporalextents',
    sa.Column('temporal_extent_id', sa.UUID(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_temporalextents_resource_id_resources')),
    sa.PrimaryKeyConstraint('temporal_extent_id', name=op.f('pk_temporalextents'))
    )
    op.create_table('code',
    sa.Column('code_id', sa.UUID(), nullable=False),
    sa.Column('language', sa.String(), nullable=True),
    sa.Column('codetext', sa.String(), nullable=True),
    sa.Column('examples_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['examples_id'], ['codeexamples.examples_id'], name=op.f('fk_code_examples_id_codeexamples')),
    sa.PrimaryKeyConstraint('code_id', name=op.f('pk_code'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('code')
    op.drop_table('temporalextents')
    op.drop_index('idx_spatialextents_geometry', table_name='spatialextents', postgresql_using='gist')
    op.drop_table('spatialextents')
    op.drop_table('provides')
    op.drop_table('linkedto')
    op.drop_table('hasresources')
    op.drop_table('examples')
    op.drop_table('codeexamples')
    op.drop_table('resources')
    op.drop_table('providers')
    op.drop_table('licenses')
    op.drop_table('categories')
    # ### end Alembic commands ###
