"""migration

Revision ID: fa9b2a0c3eb3
Revises:
Create Date: 2025-04-24 12:35:45.162047

"""

from typing import Sequence, Union

import geoalchemy2
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "fa9b2a0c3eb3"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "categories",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("abstract", sa.String(), nullable=True),
        sa.Column("icon", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_categories")),
        sa.UniqueConstraint("title", name=op.f("uq_categories_title")),
    )
    op.create_table(
        "licenses",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_licenses")),
        sa.UniqueConstraint("name", name=op.f("uq_licenses_name")),
    )
    op.create_table(
        "providers",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("short_name", sa.String(), nullable=True),
        sa.Column("provider_url", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_providers")),
        sa.UniqueConstraint("name", name=op.f("uq_providers_name")),
        sa.UniqueConstraint("short_name", name=op.f("uq_providers_short_name")),
    )
    op.create_table(
        "resources",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("abstract", sa.String(), nullable=False),
        sa.Column("html_content", sa.String(), nullable=True),
        sa.Column("resource_url", sa.String(), nullable=True),
        sa.Column("documentation_url", sa.String(), nullable=True),
        sa.Column("openapi_url", sa.String(), nullable=True),
        sa.Column("git_url", sa.String(), nullable=True),
        sa.Column("maintenance_and_update_frequency", sa.String(), nullable=True),
        sa.Column("release_date", sa.Date(), nullable=True),
        sa.Column("contact", sa.String(), nullable=True),
        sa.Column("keywords", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("version", sa.String(), nullable=True),
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("license_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["licenses.id"],
            name=op.f("fk_resources_license_id_licenses"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_resources")),
    )
    op.create_index(
        "unique_resource_title_type", "resources", ["title", "type"], unique=True
    )
    op.create_table(
        "code_examples",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("resource_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resources.id"],
            name=op.f("fk_code_examples_resource_id_resources"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_code_examples")),
    )
    op.create_table(
        "examples",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("example_url", sa.String(), nullable=True),
        sa.Column("favicon_url", sa.String(), nullable=True),
        sa.Column("resource_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resources.id"],
            name=op.f("fk_examples_resource_id_resources"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_examples")),
    )
    op.create_table(
        "resource_category",
        sa.Column("resource_id", sa.UUID(), nullable=False),
        sa.Column("category_id", sa.UUID(), nullable=False),
        sa.Column("is_main_category", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["categories.id"],
            name=op.f("fk_resource_category_category_id_categories"),
        ),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resources.id"],
            name=op.f("fk_resource_category_resource_id_resources"),
        ),
        sa.PrimaryKeyConstraint(
            "resource_id", "category_id", name=op.f("pk_resource_category")
        ),
    )
    op.create_index(
        "only_one_main_category_per_resource",
        "resource_category",
        ["resource_id"],
        unique=True,
        postgresql_where=sa.text("is_main_category = true"),
    )
    op.create_table(
        "resource_provider",
        sa.Column("resource_id", sa.UUID(), nullable=False),
        sa.Column("provider_id", sa.UUID(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["providers.id"],
            name=op.f("fk_resource_provider_provider_id_providers"),
        ),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resources.id"],
            name=op.f("fk_resource_provider_resource_id_resources"),
        ),
        sa.PrimaryKeyConstraint(
            "resource_id", "provider_id", name=op.f("pk_resource_provider")
        ),
    )
    op.create_table(
        "resource_resource",
        sa.Column("used_by", sa.UUID(), nullable=False),
        sa.Column("based_on", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["based_on"],
            ["resources.id"],
            name=op.f("fk_resource_resource_based_on_resources"),
        ),
        sa.ForeignKeyConstraint(
            ["used_by"],
            ["resources.id"],
            name=op.f("fk_resource_resource_used_by_resources"),
        ),
        sa.PrimaryKeyConstraint(
            "used_by", "based_on", name=op.f("pk_resource_resource")
        ),
    )
    op.create_table(
        "spatial_extents",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("region", sa.String(), nullable=True),
        sa.Column("details", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                srid=4326, from_text="ST_GeomFromEWKT", name="geometry"
            ),
            nullable=True,
        ),
        sa.Column("spatial_resolution", sa.String(), nullable=True),
        sa.Column("resource_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resources.id"],
            name=op.f("fk_spatial_extents_resource_id_resources"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_spatial_extents")),
    )
    op.create_table(
        "temporalextents",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("resource_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resources.id"],
            name=op.f("fk_temporalextents_resource_id_resources"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_temporalextents")),
    )
    op.create_table(
        "code",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("language", sa.String(), nullable=True),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column("examples_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["examples_id"],
            ["code_examples.id"],
            name=op.f("fk_code_examples_id_code_examples"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_code")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("code")
    op.drop_table("temporalextents")
    op.drop_index(
        "idx_spatial_extents_geometry",
        table_name="spatial_extents",
        postgresql_using="gist",
    )
    op.drop_table("spatial_extents")
    op.drop_table("resource_resource")
    op.drop_table("resource_provider")
    op.drop_index(
        "only_one_main_category_per_resource",
        table_name="resource_category",
        postgresql_where=sa.text("is_main_category = true"),
    )
    op.drop_table("resource_category")
    op.drop_table("examples")
    op.drop_table("code_examples")
    op.drop_index("unique_resource_title_type", table_name="resources")
    op.drop_table("resources")
    op.drop_table("providers")
    op.drop_table("licenses")
    op.drop_table("categories")
    # ### end Alembic commands ###
