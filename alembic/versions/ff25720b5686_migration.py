"""empty message

Revision ID: ff25720b5686
Revises: ca00ef6f04a5
Create Date: 2025-04-07 09:49:57.879920

"""
from typing import Sequence, Union

import geoalchemy2
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ff25720b5686'
down_revision: Union[str, None] = 'ca00ef6f04a5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_code_examples_id_codeexamples', 'code', type_='foreignkey')
    op.create_table('code_examples',
    sa.Column('examples_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('resource_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_code_examples_resource_id_resources')),
    sa.PrimaryKeyConstraint('examples_id', name=op.f('pk_code_examples'))
    )
    op.create_table('resource_category',
    sa.Column('has_resources_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.category_id'], name=op.f('fk_resource_category_category_id_categories')),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_resource_category_resource_id_resources')),
    sa.PrimaryKeyConstraint('has_resources_id', name=op.f('pk_resource_category'))
    )
    op.create_table('resource_provider',
    sa.Column('provider_id', sa.UUID(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider_id'], name=op.f('fk_resource_provider_provider_id_providers')),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_resource_provider_resource_id_resources')),
    sa.PrimaryKeyConstraint('provider_id', 'resource_id', name=op.f('pk_resource_provider'))
    )
    op.create_table('resource_resource',
    sa.Column('used_by', sa.UUID(), nullable=False),
    sa.Column('based_on', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['based_on'], ['resources.resource_id'], name=op.f('fk_resource_resource_based_on_resources')),
    sa.ForeignKeyConstraint(['used_by'], ['resources.resource_id'], name=op.f('fk_resource_resource_used_by_resources')),
    sa.PrimaryKeyConstraint('used_by', 'based_on', name=op.f('pk_resource_resource'))
    )
    op.create_table('spatial_extents',
    sa.Column('spatial_extent_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('region', sa.String(), nullable=True),
    sa.Column('details', sa.String(), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('spatial_resolution', sa.String(), nullable=True),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name=op.f('fk_spatial_extents_resource_id_resources')),
    sa.PrimaryKeyConstraint('spatial_extent_id', name=op.f('pk_spatial_extents'))
    )
    op.create_index('idx_spatial_extents_geometry', 'spatial_extents', ['geometry'], unique=False, postgresql_using='gist', if_not_exists=True)
    op.drop_table('linkedto')
    op.drop_index('idx_spatialextents_geometry', table_name='spatialextents', postgresql_using='gist')
    op.drop_table('spatialextents')
    op.drop_table('codeexamples')
    op.drop_table('hasresources')
    op.drop_table('provides')
    op.create_foreign_key(op.f('fk_code_examples_id_code_examples'), 'code', 'code_examples', ['examples_id'], ['examples_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('fk_code_examples_id_code_examples'), 'code', type_='foreignkey')
    op.create_foreign_key('fk_code_examples_id_codeexamples', 'code', 'codeexamples', ['examples_id'], ['examples_id'])
    op.create_table('provides',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider_id'], name='fk_provides_provider_id_providers'),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name='fk_provides_resource_id_resources'),
    sa.PrimaryKeyConstraint('provider_id', 'resource_id', name='pk_provides')
    )
    op.create_table('hasresources',
    sa.Column('has_resources_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.category_id'], name='fk_hasresources_category_id_categories'),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name='fk_hasresources_resource_id_resources'),
    sa.PrimaryKeyConstraint('has_resources_id', name='pk_hasresources')
    )
    op.create_table('codeexamples',
    sa.Column('examples_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name='fk_codeexamples_resource_id_resources'),
    sa.PrimaryKeyConstraint('examples_id', name='pk_codeexamples')
    )
    op.create_table('spatialextents',
    sa.Column('spatial_extent_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('details', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('spatial_resolution', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], name='fk_spatialextents_resource_id_resources'),
    sa.PrimaryKeyConstraint('spatial_extent_id', name='pk_spatialextents')
    )
    op.create_index('idx_spatialextents_geometry', 'spatialextents', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('linkedto',
    sa.Column('usedby', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('basedon', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['basedon'], ['resources.resource_id'], name='fk_linkedto_basedon_resources'),
    sa.ForeignKeyConstraint(['usedby'], ['resources.resource_id'], name='fk_linkedto_usedby_resources'),
    sa.PrimaryKeyConstraint('usedby', 'basedon', name='pk_linkedto')
    )
    op.drop_index('idx_spatial_extents_geometry', table_name='spatial_extents', postgresql_using='gist')
    op.drop_table('spatial_extents')
    op.drop_table('resource_resource')
    op.drop_table('resource_provider')
    op.drop_table('resource_category')
    op.drop_table('code_examples')
    # ### end Alembic commands ###
